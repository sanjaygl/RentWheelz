// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentWheelz.Database;

#nullable disable

namespace RentWheelz.Database.Migrations
{
    [DbContext(typeof(RentWheelzDbContext))]
    [Migration("20240517061958_Update-DateTimeOffset")]
    partial class UpdateDateTimeOffset
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentWheelz.Database.Entities.Car", b =>
                {
                    b.Property<string>("CarID")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarAvailability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CarID");

                    b.HasIndex("CarID")
                        .IsUnique();

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("RentWheelz.Database.Entities.Reservation", b =>
                {
                    b.Property<string>("BookingId")
                        .HasColumnType("text");

                    b.Property<string>("CarID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumOfTravelers")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("PickupDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.HasKey("BookingId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("CarID");

                    b.HasIndex("UserEmail");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RentWheelz.Database.Entities.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProofId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserName");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RentWheelz.Database.Entities.Reservation", b =>
                {
                    b.HasOne("RentWheelz.Database.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentWheelz.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
